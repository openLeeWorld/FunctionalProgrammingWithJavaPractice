함수는 일급 객체다(변수에 함수 할당, 함수를 인수로 전달, 함수/메서드에서 함수 반환, 이름 없는 익명 함수 등)
순수 함수 (동일한 입력은 동일한 출력을 생성, 사이드 이펙트 x)
순수 객체 메서드(pure object method): 객체의 메서드가 해당 객체의 상태에 영향을 주더라도, 그것이 내부 상태 외의 다른 사이드 이펙트를 일으키지 않음
사이드 이펙트 격리
문장보다는 표현식 사용
불변성을 향해 나아가기(불변 컬렉션, 불변 수학, 레코드, 자바 날짜 및 시간 API 등
map / filter / reduce 를 활용한 데이터 처리 ex) 스트림
ㄴ map(Functon<T, R>, filter(Predicate<T>), sort(Comparator<T>)
추상화 가이드 구현, 함수형 연결고리 만들기(명령형 + 함수형)
함수형 인터페이스: @FunctionalInterface
일반적인 작업을 위한 람다 팩토리 (map( ->)
다중-arity(함수나 메서드가 여러 개의 서로 다른 인수를 가질 수 있는 특성)를 포함한 자신만의 함수형 인터페이스 -> Function<?,?> 상속 후 default 메서드 추가 등
함수형 null 처리를 위한 Optional 사용
불변성, 순수함수가 있는 함수형 기술의 병렬성, 동시성 (병렬 스트림, CompletableFuture 등)
잠재적인 오버헤드(메모리 등) 주의
FC(Functional Core)/IS(Imperative Shell) 모델 : FC -> Unit test, IS-> Integration Test 가능
